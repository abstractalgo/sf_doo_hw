import Head from "next/head";

import {
  StreamClient,
  Stream,
  CreateParams,
  CreateMultiParams,
  WithdrawParams,
  TransferParams,
  TopupParams,
  CancelParams,
  GetAllParams,
  StreamDirection,
  StreamType,
  Cluster,
  TxResponse,
  CreateResponse,
  BN,
  getBN,
  getNumberFromBN,
} from "@streamflow/stream";
import { useCallback, useEffect, useRef, useState } from "react";
import { useWallet } from "../components/WalletProvider";
import { useWallet as useWallet2 } from "@solana/wallet-adapter-react";
import { PublicKey, Connection, Keypair, clusterApiUrl } from "@solana/web3.js";
import { TokenSelectorInput } from "../components/TokenSelectorInput";

const DEVNET_PK = "9U3CcDLVgFxH8z7QYiEjxRgimrKM9yT8XWRvWm3SqnoE";

const sfClient = new StreamClient(
  clusterApiUrl("devnet"),
  Cluster.Devnet,
  "confirmed"
);

export default function Home() {
  const wallet = useWallet();

  const [streams, setStreams] = useState<
    Awaited<ReturnType<StreamClient["get"]>>
  >([]);

  const [recipient, setRecipient] = useState<string>(
    "HMxeRHvN7MB4Bz9Ez85optgZPzS7vmUtefmEkbaH4LVq"
  );
  const [selectedMint, setSelectedMint] = useState<string | null>(null);
  const [title, setTitle] = useState("Transfer to John Doe");

  const getStreams = useCallback(async () => {
    if (!wallet || !wallet.publicKey) {
      setStreams([]);
      return;
    }

    const sfStreams = await sfClient.get({
      wallet: wallet.publicKey,
    });

    setStreams(sfStreams);
  }, [wallet]);

  useEffect(() => {
    getStreams();
  }, [getStreams]);

  const handleCreateStream = async (options: {
    walletPublicKey: PublicKey;
    recipientAddress: string;
    mint: string;
    name: string;
  }) => {
    const createStreamParams: CreateParams = {
      sender: Keypair.generate(), // TODO,
      recipient: options.recipientAddress,
      mint: options.mint,
      start: Math.floor(Date.now() / 1000),
      cliff: Math.floor(Date.now() / 1000),
      cliffAmount: 0,
      depositedAmount: getBN(1000000000000, 9), // Deposited amount of tokens (using smallest denomination).
      amountPerPeriod: getBN(5000000000, 9), // Release rate: how many tokens are unlocked per each period.
      period: 3600, // Time step (period) in seconds per which the unlocking occurs.
      name: options.name,
      canTopup: false, // setting to FALSE will effectively create a vesting contract.
      cancelableBySender: true, // Whether or not sender can cancel the stream.
      cancelableByRecipient: false, // Whether or not recipient can cancel the stream.
      transferableBySender: true, // Whether or not sender can transfer the stream.
      transferableByRecipient: false, // Whether or not recipient can transfer the stream.
      automaticWithdrawal: true, // [WIP] Whether or not a 3rd party (e.g. cron job, "cranker") can initiate a token withdraw/transfer.
      withdrawalFrequency: 10, // [WIP] Relevant when automatic withdrawal is enabled. If greater than 0 our withdrawor will take care of withdrawals. If equal to 0 our withdrawor will skip, but everyone else can initiate withdrawals.
    };
    try {
      const { ixs, tx, metadata } = await sfClient.create(createStreamParams);
      // we can just re-fetch streams and show it in the list
      getStreams();
      // TODO reset form data
    } catch (exception) {
      // handle exception
    }
  };

  const canSubmit = recipient.length === 44 && !!selectedMint && !!title;

  return (
    <>
      <Head>
        <title>sf domaci</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {/* wallet connector */}
        <div>
          {wallet ? (
            <div>
              {!wallet.publicKey ? (
                <button onClick={() => wallet.connect()}>
                  Connect to Phantom
                </button>
              ) : (
                <>
                  <button onClick={() => wallet.disconnect()}>
                    Disconnect from Phantom
                  </button>
                  <p>Your public key is : {wallet.publicKey.toBase58()}</p>
                </>
              )}
            </div>
          ) : (
            <div>
              Opps!!! Phantom is not available. Go get it{" "}
              <a href="https:phantom.app/">https:phantom.app/</a>.
            </div>
          )}
        </div>

        {/* stream creation form */}
        {!wallet || !wallet.publicKey ? null : (
          <div>
            <h2>Create new stream</h2>

            <div
              style={{
                display: "flex",
                flexDirection: "column",
                gap: "10px",
                padding: "10px",
              }}
            >
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "5px",
                  alignItems: "start",
                }}
              >
                <label>Recipient Wallet Address:</label>
                <input
                  type="text"
                  value={recipient}
                  onChange={(e) => {
                    setRecipient(e.target.value);
                  }}
                />
              </div>

              <div>
                <label>Token:</label>
                <TokenSelectorInput
                  value={selectedMint}
                  onChange={(value) => setSelectedMint(value)}
                />
              </div>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "5px",
                  alignItems: "start",
                }}
              >
                <label>Title:</label>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => {
                    setTitle(e.target.value);
                  }}
                />
              </div>

              <div>
                <button
                  onClick={() => {
                    if (!canSubmit) {
                      return;
                    }

                    handleCreateStream({
                      recipientAddress: recipient,
                      mint: selectedMint,
                      walletPublicKey: wallet.publicKey,
                      name: title,
                    });
                  }}
                  disabled={!canSubmit}
                >
                  Create Stream
                </button>
              </div>
            </div>
          </div>
        )}

        {/* streams listing */}
        {
          <div
            style={{
              margin: "20px 0",
            }}
          >
            <h2>My streams</h2>

            {streams.map(([tx, stream]) => {
              return (
                <div
                  key={tx}
                  style={{
                    margin: "8px",
                  }}
                >
                  {stream.name}: {tx}
                </div>
              );
            })}
          </div>
        }
      </main>
    </>
  );
}
